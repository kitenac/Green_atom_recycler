version: '3.8'
# create containers, bind`em to network "Atom_eco_NET"
services:
  Postgres_Pet_PROD:
    image: postgres:13.16-bookworm
    container_name: Postgres_Pet_PROD  # setup name to know exact name of container (backend container can access db container via it`s name - Docker`s DNS would resolve it to ip)
    # password and database creation
    environment:
      POSTGRES_PASSWORD: root
      POSTGRES_USER: root
      POSTGRES_DB: Atom_eco
    ports:
      - "5432:5432"  # Map host port 5432 to container port 5432
    networks:
      - Atom_eco_NET
    
    # check if database is already loaded | to prevent backend app to fail while DB is booting
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "root"]
      timeout: 15s
      retries: 10
  # docker tag atom_eco:latest albanec7/atom_eco:latest
  # docker push albanec7/atom_eco:latest
  Atom_eco_Pet_PROD:
    image: albanec7/atom_eco:latest
    container_name: Atom_eco_PROD  
    environment:
      PORT: 8001

    # portforwarding - host:docker: 8001 --> 8001
    ports:
      - "8001:8001"  
    networks:
      - Atom_eco_NET

    # specify that our backend needs DB to be started before itself starts
    depends_on:
      Postgres_Pet_PROD:
          condition: service_healthy # dependency is satistfied - when it`s in healthy status

    # retry app if fallen (dodge if db is DOWN)
    restart: always


# create Network for containers 
networks:
  Atom_eco_NET: